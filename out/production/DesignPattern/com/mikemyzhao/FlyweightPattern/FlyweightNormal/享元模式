1、享元模式
使用共享对象可有效地支持大量的细粒度的对象

2、组件
(1)Flyweight--抽象享元模式
产品的抽象类，定义出对象的外部状态和内部状态的接口或实现
（2）ConcreteFlyweight--具体享元模式
具体一个产品类，实现抽象角色定义的业务。该角色中需要注意的是内部状态处理应该与环境无关，不应该出现一个操作改变了内部状态，
同时修改了外部状态，这绝对不允许的
（3）unshareConcreteFlyweight--不可共享的享元模式
不存在外部状态或者安全要求（如线程安全）不能够使用共享技术的对象，该对象一般不会出现在享元工厂中。
（4）FlyweightFactory--享元工厂
职责非常简单，就是构造一个池容器，同时提供从池中获得对象的方法。