1、状态模式
当一个对象内在状态改变时允许其他改变行为，这个对象看起来像改变其类。
状态模式的核心是封装，状态的变更引起行为变更，从外部看起来就像这个对象对应的类发生了改变一样

2、组件
(1)State---抽象状态角色
接口或抽象类，负责对象状态定义，并且封装环境角色以实现状态切换
(2)ConcreteState---具体状态角色
每一个具体状态必须完成两个职责：本状态的行为管理以及趋向状态处理，通俗地说，就是本状态下要做的事情，以及本状态如何过度到其他状态
（3）Context---环境角色
定义客户端需要的接口，并且负责具体状态的切换

3、状态模式相对来说比较复杂，提供了一种对物质运动的另一个观察视角，通过状态变更促使行为变化。

4、优点
结构清晰，避免过多判断，提高系统的可维护性
遵循设计原则，很好体现了开闭和单一原则，每个状态都是一个子类，增加状态就要增加子类，修改状态，只要修改一个子类
封装性好，状态变换放置到内部来实现，外部的调用不用知道内部如何实现

5、缺点
状态子类可能过多，类膨胀

6、使用场景
行为随状态改变而改变的场景：例如权限设计
条件、分支判断替换