1、访问者模式
封装一些作用于某种数据结构中的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作

2、组件
（1）Visitor抽象访问者
抽象类或接口，声明访问者可以访问哪些元素，具体到程序中就是visit方法的参数定义哪些对象是可以被访问的。
（2）ConcreteVisitor具体访问者
它影响访问者访问到一个类后该怎么干，要做什么事。
（3）Element抽象元素
接口或者抽象类，声明接受哪一类访问者访问，程序上通过accept方法中的参数来定义
（4）ConcreteElement具体元素
实现accept方法，通常是visitor.visit(this)，基本上形成了一种模式了
（5）ObjectStruture结构对象
元素产生者，一般容纳在多个不同类、不同接口的容器，如List、Set、Map等

3、优点
（1）符合单一职责原则
具体元素角色Employee抽象类的两个子类负责数据的加载，而Visitor类则负责报表的展现，两个不同的职责非常明确的分开
(2)优秀的扩展性
由于职责分开，继续增加对数据的操作是非常快捷的，例如，要增加一份给大老板的报表，这份报表又有所不同，直接在Visitor中增加一个方法，传递数据
后进行整理打印
（3）灵活性高
如果我们要统计员工的工资，我们可以使用访问者模式来实现，把数据扔给访问者，由访问者来计算

4、缺点
（1）具体元素对访问者公布细节
访问者要访问一个类就必然要求这个类公布一些数据和方法，也就是说访问者关注了其他类的内部细节，这事迪米特法则不建议的
（2）具体元素变更更加困难
具体元素角色的增加、删除、修改都是比较困难的，上面的例子中要是想增加一个成员变量，如age，Visitor就需要修改，如果是多个Visitor就比较复杂了
（3）违背了依赖倒置原则
访问者依赖的是具体元素，而不是抽象元素，这就破坏了依赖倒置的原则，特别是面向对象编程中，抛弃了接口的依赖，而直接依赖实现类，扩展比较困难.

5、使用场景
（1）一个对象结构包含很多类对象，他们有不同的接口，而你想对这些对象实施一些依赖于其具体类的操作，也就是说用迭代器已经不能胜任的情景
（2）需要对一个对象结构中的对象进行很多不同并且不相关的操作，而你想避免让这些操作"污染"这些对象的类
总结：出现以下状况必须考虑访问者模式：业务规则要求遍历多个不同的对象，这本身也是访问者模式的出发点，迭代器模式只能访问同类或同接口的数据，而访问者
模式是对迭代器模式的扩充，可以遍历不同的对象，然后执行不同的操作，也就是针对访问的对象不同，执行不同的操作。访问者模式还有一个用途：
就是充当拦截器的角色。

6、看下其他几个扩展例子

7、总结
访问模式是一种集中规整模式，特别适用于大规模重构的项目，在这一个阶段需求已经非常清晰，原系统的功能点也已经明确，
通过访问者模式可以容易把一些功能进行梳理，达到最终优化的目的---功能集中化，如一个统一的报表运算，UI展现等。我们还可以
与其他模式混编建立一套自己的过滤器或者拦截器。