1、桥梁模式
将抽象和实现解耦，使得两者可以独立变化

2、组件
（1）Abstraction--抽象化角色
定义出该角色的行为，同事保存对实现化角色的引用，该角色一般是抽象类
（2）Implementor---实现化角色
接口或者抽象类，定义角色必需的行为和属性
（3）RefinedAbstraction---修正抽象化角色
它引用实现化角色对抽象化角色进行修正
（4）ConcreteImplementor---具体实现化角色
实现接口或抽象类定义的方法和属性

3、优点
（1）抽象和实现分离
为了解决继承的缺点提出的设计
（2）优秀的扩展能力
增加抽象
（3）实现细节对客户透明
抽象层通过聚合关系完成了封装

4、使用场景
(1)不希望或不使用继承的场景
（2）接口或抽象类不稳定的场景
明知道接口不稳定还想通过实现或继承来实现业务需求
（3）重要性要求较高的场景
设计的颗粒度越细，则被重用的可能性越大，而采用继承受父类的限制，不可能出现太细的粒度

5、注意
桥梁模式比较简单，使用该模式时考虑如何拆分抽象和实现，并不是一涉及继承就要考虑使用该模式。
桥梁模式的意图还是对变化的封装，尽量把可能变化的因素封装到最细，最小的逻辑单元中，避免风险扩散。
如果在设计过程中发现类的继承有N层时，可以考虑使用桥梁模式